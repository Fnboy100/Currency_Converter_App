plugins {
    id "com.android.application"
    id "kotlin-android"
    // The Flutter Gradle Plugin must be applied after the Android and Kotlin Gradle plugins.
    id "dev.flutter.flutter-gradle-plugin"
}

def localProperties = new Properties()
def localPropertiesFile = rootProject.file("local.properties")
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader("UTF-8") { reader ->
        localProperties.load(reader)
    }
}

def flutterVersionCode = localProperties.getProperty("flutter.versionCode")
if (flutterVersionCode == null) {
    flutterVersionCode = "1"
}

def flutterVersionName = localProperties.getProperty("flutter.versionName")
if (flutterVersionName == null) {
    flutterVersionName = "1.0"
}

android {
    namespace = "com.example.main_file"
    compileSdk = flutter.compileSdkVersion
    ndkVersion = flutter.ndkVersion

    compileOptions {
        sourceCompatibility = JavaVersion.VERSION_17
        targetCompatibility = JavaVersion.VERSION_17
    }

    aaptOptions {
    cruncherEnabled = false
}
    

    /*defaultConfig {
        // TODO: Specify your own unique Application ID (https://developer.android.com/studio/build/application-id.html).
        applicationId = "com.example.main_file"
        // You can update the following values to match your application needs.
        // For more information, see: https://docs.flutter.dev/deployment/android#reviewing-the-gradle-build-configuration.
        minSdk = flutter.minSdkVersion
        targetSdk = flutter.targetSdkVersion
        versionCode = flutterVersionCode.toInteger()
        versionName = flutterVersionName
    }*/

    defaultConfig {
    applicationId = "com.example.main_file"
    minSdkVersion 21   // Replace 21 with the actual minimum SDK version you want
    targetSdkVersion 33 // Replace 33 with the target SDK version
    versionCode = flutterVersionCode.toInteger()
    versionName = flutterVersionName
}

    flavorDimensions "environment"

    productFlavors {
    dev {
        dimension "environment"
        applicationIdSuffix ".dev"
        versionNameSuffix "-dev"
       
    }
    staging {
        dimension "environment"
        applicationIdSuffix ".staging"
        versionNameSuffix "-staging"
        
    }
    prod {
        dimension "environment"
        
    }
}

    
    applicationVariants.all { variant ->
        variant.outputs.all { output ->
            def flavor = variant.flavorName ?: 'no-flavor'
            def buildType = variant.buildType.name

            // Customize the output file name without setting an absolute path
            def outputFileName = "app-${flavor}-${buildType}.apk"

            // Remove the "release" and "debug" suffixes if needed
            //outputFileName = outputFileName.replace("-release", "").replace("-debug", "")

            // Set the file name directly (AGP 4.0+ syntax)
            output.outputFileName = outputFileName

            println("APK will be generated with name: ${outputFileName}")
        }
    }


    signingConfigs {
      release {
        keyAlias 'my-key-alias'
        keyPassword '123000'
        storeFile file('naira-to-dollar-app-release-key.keystore')
        storePassword '123000'
    }
    
}


  buildTypes {
        release {
            // TODO: Add your own signing config for the release build.
            // Signing with the debug keys for now, so `flutter run --release` works.
            //signingConfig = signingConfigs.debug
            signingConfig = signingConfigs.release
            shrinkResources false
            // Enable ProGuard or R8 for release builds
            minifyEnabled false
            
            // Specify ProGuard rules file
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'

            zipAlignEnabled true
        }
    }
}

flutter {
    source = "../.."
}
